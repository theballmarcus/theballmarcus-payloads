#!/usr/bin/env python3
"""
WFuzz Helper Tool

Converts a Burp-style HTTP request file into a wfuzz command
and optionally performs character-by-character fuzzing.
"""
import argparse
import json
import os
import string
import subprocess
from collections import Counter
from typing import Any, Dict, List, Tuple, Union
from unittest import result
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
import statistics

# Safe characters for guessing
SAFE_CHARS = set(string.ascii_letters + string.digits + '-_')

def find_most_probable_character(data: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
    """
    Identify deviations from the majority response pattern to find probable characters.
    Returns dict with 'safe_chars' and 'special_chars'.
    If no deviations are found, but only one safe_char appears in error responses, assume it's the probable character.
    """
    pattern_counts = Counter((e['chars'], e['words'], e['lines']) for e in data)
    if not pattern_counts:
        return {'safe_chars': [], 'special_chars': []}

    majority_pattern, _ = pattern_counts.most_common(1)[0]
    deviations = []

    for e in data:
        if e.get('code', 0) < 400:
            patt = (e['chars'], e['words'], e['lines'])
            if patt != majority_pattern:
                dev = sum(abs(a - b) for a, b in zip(patt, majority_pattern))
                deviations.append((dev, e))

    deviations.sort(key=lambda x: x[0], reverse=True)
    result = {'safe_chars': [], 'special_chars': []}

    if deviations:
        max_dev = deviations[0][0]
        for dev, e in deviations:
            if dev != max_dev:
                break
            char = e.get('payload', '')
            details = {'chars': e['chars'], 'words': e['words'], 'lines': e['lines'], 'deviation': dev}
            key = 'safe_chars' if len(char) == 1 and char in SAFE_CHARS else 'special_chars'
            result[key].append({'char': char, 'details': details})

    # Fallback: If no deviations matched, check for single unique safe_char among errors
    if not result['safe_chars'] and not result['special_chars']:
        error_safe_chars = {
            e.get('payload', ''): e for e in data
            if e.get('code', 0) >= 400 and len(e.get('payload', '')) == 1 and e.get('payload') in SAFE_CHARS
        }
        if len(error_safe_chars) == 1:
            char, e = next(iter(error_safe_chars.items()))
            details = {'chars': e['chars'], 'words': e['words'], 'lines': e['lines'], 'deviation': None}
            result['safe_chars'].append({'char': char, 'details': details})

    return result

def find_most_probable_time_based_character(
    data: List[Dict[str, Any]],
    deviation_threshold: float = 1  # 35% by default
) -> Union[Dict[str, Any], bool]:
    """
    Identify the character with the largest positive deviation in response time from the mean.
    Return False if no character deviates enough (based on deviation_threshold).
    
    Parameters:
        - data: list of request/response records
        - deviation_threshold: minimum percent deviation from mean to be considered significant

    Returns:
        - dict with 'most_probable', 'deviation', and 'all_char_stats', or
        - False if no character significantly deviates
    """
    if not data:
        return False

    # Group by payloads
    payload_groups = {}
    for e in data:
        payload = e.get('payload', '')
        if len(payload) != 1:
            continue  # Skip multi-char payloads
        payload_groups.setdefault(payload, []).append(e)

    char_stats = []
    
    for payload, group in payload_groups.items():
        avg_response_time = sum(e['response_time'] for e in group) / len(group)
        stats = {
            'char': payload,
            'response_time': avg_response_time,
            'count': len(group),
            'details': {
                'chars': sum(e['chars'] for e in group),
                'words': sum(e['words'] for e in group),
                'lines': sum(e['lines'] for e in group),
            }
        }
        char_stats.append(stats)

    if not char_stats:
        return False

    # Compute global average
    global_mean = statistics.mean(c['response_time'] for c in char_stats)

    # Add deviation to each
    for c in char_stats:
        c['deviation'] = c['response_time'] - global_mean
        c['relative_deviation'] = c['deviation'] / global_mean if global_mean else 0

    # Get the max deviation entry
    most_probable = max(char_stats, key=lambda x: x['deviation'])
    print(f"Most probable character: {most_probable['char']} with deviation {most_probable['deviation']} and relative deviation {most_probable['relative_deviation']:.2%}")
    # Check if the deviation is significant enough
    if most_probable['relative_deviation'] < deviation_threshold:
        return False

    return {
        'most_probable': most_probable['char'],
        'deviation': most_probable['deviation'],
        'relative_deviation': most_probable['relative_deviation'],
        'all_char_stats': char_stats
    }

def to_ansi_c_quoted_string(s: str) -> str:
    """Convert string to ANSI C quoted string for shell."""
    parts, i = [], 0
    while i < len(s):
        c = s[i]
        if c == '\r' and i + 1 < len(s) and s[i+1] == '\n':
            parts.append('\\x0d\\x0a'); i += 2; continue
        if c == '\n':
            parts.append('\\x0d\\x0a'); i += 1; continue
        if 32 <= ord(c) <= 126 and c not in "\\'":
            parts.append(c)
        else:
            if c == '\\': parts.append('\\\\')
            elif c == "'": parts.append("\\'")
            else: parts.append(f"\\x{ord(c):02x}")
        i += 1
    return "$'" + ''.join(parts) + "'"

def parse_burp_request_file(path: str) -> Tuple[str, str, Dict[str, str], str]:
    """Parse Burp HTTP request file into method, path, headers, body."""
    with open(path, 'r') as f:
        lines = f.read().splitlines()
    method, req_path, _ = lines[0].split(maxsplit=2)
    headers, body_lines, in_body = {}, [], False
    for line in lines[1:]:
        if not in_body and not line.strip():
            in_body = True
            continue
        if in_body:
            body_lines.append(line)
        else:
            if ':' in line:
                k, v = line.split(':', 1)
                headers[k.strip()] = v.strip()

    base_url = headers.get('Host', '').strip()

    body = '\r\n'.join(body_lines)
    return method, req_path, headers, body, base_url

def build_wordlist(args: argparse.Namespace) -> List[str]:
    """Build wordlist argument for wfuzz based on CLI args."""
    wordslists = []
    if args.w:
        for wl in args.w:
            if not os.path.isfile(wl):
                raise ValueError(f"Wordlist file '{wl}' does not exist.")
            if not os.access(wl, os.R_OK):
                raise ValueError(f"Wordlist file '{wl}' is not readable.")
            wordslists.append([f'file', wl])
    if args.r:
        for r in args.r:
            if r <= 0:
                raise ValueError(f"Invalid range value: {r}. Must be a positive integer.")
            if r > 1000000:
                raise ValueError(f"Range value {r} is too large. Maximum is 1,000,000.")
            wordslists.append([f'range', f'1-{r}'])  # Use range format for wfuzz
    if args.guess_word:
        tmp = '/tmp/printables.txt'
        with open(tmp, 'w') as f:
            f.write('\n'.join(c for c in string.printable if c.isprintable()))
        return [[f'file', f'{tmp}']] # Only support one wordlist for guessing

    if not wordslists:
        raise ValueError("No valid wordlist provided. Use -w, -r or --guess-word.")
    return wordslists

def build_wfuzz_command(method: str, path: str, headers: Dict[str, str], body: str, args: argparse.Namespace) -> str:
    """Construct wfuzz command from parsed request and CLI args."""
    # Wordlist
    wls = build_wordlist(args)
    print(wls)
    print(f"Using wordlists: {', '.join(f'{type},{wl}' for type, wl in wls)}")
    # Count FUZZ occurrences
    cnt = path.count('FUZZ') + sum(v.count('FUZZ') for v in headers.values()) + (body.count('FUZZ') if body else 0)
    if cnt == 0:
        raise ValueError("No FUZZ placeholder found in request.")
    
    payloads = ""
    for wl in wls:
        print(wl)
        payloads += ' '.join(['-z ' + f'{wl[0]},{wl[1]} '])

    # Base command
    parts = ['wfuzz', payloads, '-X', method]

    # Filters
    for opt, flag in (('hl','--hl'),('hh','--hh'),('sc','--sc'),('hc','--hc')):
        val = getattr(args, opt)
        if val:
            parts += [flag, str(val)]
    if args.ss:
        parts += ['--ss', args.ss]
    if args.hs:
        parts += ['--hs', args.hs]

    # Headers (quoted)
    for k, v in headers.items():
        parts.append('-H')
        parts.append(f'"{k}: {v}"')

    # Body
    if body:
        parts += ['-d', to_ansi_c_quoted_string(body)]

    # JSON output for guess mode
    if args.guess_word:
        parts.append('-o json')

    # URL
    base = args.base_url.rstrip('/')
    parts.append(f'"{base}{path}"')

    return ' '.join(parts)

def build_custom_parameters(method: str, path: str, headers: Dict[str, str], body: str, args: argparse.Namespace) -> Dict[str, Any]:
    """Build custom parameters for python."""
    _, wl = build_wordlist(args)[0]
    params = {
        'method': method,
        'headers': headers,
        'body': body,
        'base_url': args.base_url,
        'wordlist': wl,
        'path': path,
    }
    return params

def guess_time_based(parameters: Dict[str, Any], deviation: float) -> str:
    """Build parameters for time-based guessing."""
    guessed_string = ""

    wordlist = open(parameters['wordlist'], 'r').read().splitlines()
    method = parameters['method']
    headers = parameters['headers']
    body = parameters['body']
    base_url = parameters['base_url']
    req_url = f"{base_url}{parameters['path']}"

    while True:
        print(f"\nðŸ”¥ Guessing next character with current string: '{guessed_string}'")
        results = []

        with ThreadPoolExecutor() as executor:
            futures = {}
            if 'FIZZIR' in req_url or 'FIZZIR' in body or any('FIZZIR' in v for v in headers.values()):
                futures = {
                    executor.submit(async_send_request, req_url, method, headers, body, word, idx + 1): word
                    for idx, word in enumerate(wordlist)
                }
            else:
                futures = {executor.submit(async_send_request, req_url, method, headers, body, word, len(guessed_string)): word for word in wordlist}
            for future in as_completed(futures):
                word = futures[future]
                try:
                    response = future.result()
                    if response:
                        results.extend(response)
                except Exception as e:
                    print(f"Error processing word '{word}': {e}")

        if not results:
            return "No results found."
        chars = find_most_probable_time_based_character(results, deviation)
        if chars != False:
            guessed_string += chars['most_probable']
            print(f"Guessed character: '{chars['most_probable']}' -> Current string: '{guessed_string}'")
        else:
            print("No significant deviation found. Stopping guessing.")
            print("Final guessed string:", guessed_string)
            break

def async_send_request(req_url: str, method: str, headers: Dict[str, str], body: str, payload: str, fizz_index: int) -> List[Dict[str, Any]]:
    """Send an HTTP request asynchronously and return the response."""
    cnt = sum(v.count('FUZZ') for v in headers.values())
    cnt += body.count('FUZZ') if body else 0
    cnt += req_url.count('FUZZ')
    if cnt != 1:
        raise ValueError("Only one FUZZ placeholder is allowed in the request.")

    placeholders = {
        'FIZZW0': str(fizz_index),
        'FIZZW1': str(fizz_index + 1),
        'FIZZIR': str(fizz_index),
        'FUZZ' : payload,
    }

    for placeholder, replacement in placeholders.items():
        if (
            placeholder in req_url or
            placeholder in body or
            any(placeholder in v for v in headers.values())
        ):
            req_url = req_url.replace(placeholder, replacement)
            body = body.replace(placeholder, replacement)
            headers = {k: v.replace(placeholder, replacement) for k, v in headers.items()}

    headers = {k: v.replace('FUZZ', payload) for k, v in headers.items()}
    body = body.replace('FUZZ', payload)
    req_url = req_url.replace('FUZZ', payload)

    try:
        response = requests.request(method, req_url, headers=headers, data=body, timeout=10)
        
        print(f"Request to {req_url} with payload '{payload}' returned status {response.status_code} in {response.elapsed.total_seconds()} seconds. L: {len(response.text)}")

        return [{
            'code': response.status_code,
            'chars': len(response.text),
            'words': len(response.text.split()),
            'lines': len(response.text.splitlines()),
            'payload': payload,
            'response_time': response.elapsed.total_seconds()
        }]
    except requests.RequestException as e:
        print(f"Request failed: {e}")
        return [{'code': 500, 'chars': 0, 'words': 0, 'lines': 0, 'payload': ''}]

def guess_string_burp(wfuzz_cmd: str, guess_append: bool) -> str:
    """Guess a single string by iteratively finding one char at a time."""
    result = ''
    while True:
        if guess_append:
            cmd = wfuzz_cmd.replace('FUZZ', f'{result}FUZZ')
        else:
            cmd = wfuzz_cmd.replace('FUZZ', f'FUZZ')
        if 'FIZZW0' in cmd:
            cmd = cmd.replace('FIZZW0', f'{len(result)}')
        elif 'FIZZW1' in cmd:
            cmd = cmd.replace('FIZZW1', f'{len(result) + 1}')
        print(f"\nðŸ”¥ Executing: \n{cmd}\n")
        p = subprocess.Popen(cmd, shell=True, executable='/bin/bash', stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        for line in p.stdout or []:
            if not line.strip():
                continue
            try:
                resp = json.loads(line)
                chars = find_most_probable_character(resp)
                if len(chars['safe_chars']) == 1:
                    ch = chars['safe_chars'][0]['char']
                    result += ch
                    print(f"Found '{ch}' -> {result}")
                else:
                    print("Manual inspect:", chars)
                    return result
            except Exception:
                print(line)
        p.wait()
    return result

def main() -> None:
    parser = argparse.ArgumentParser(description="Convert Burp request to wfuzz command.")
    subparsers = parser.add_subparsers(dest="command", required=True)
    
    run_parser = subparsers.add_parser("run", help="Payload-related operations")
    run_parser.add_argument("request_file")

    run_parser.add_argument("--base_url")
    run_parser.add_argument("-w", action='append', help="Wordlist file(s)")
    run_parser.add_argument("-r", action='append', type=int, help="Range for numeric guessing (e.g. 1-100)")
    run_parser.add_argument("--hl", type=int)
    run_parser.add_argument("--hh", type=int)
    run_parser.add_argument("--sc")
    run_parser.add_argument("--hc")
    run_parser.add_argument("--ss")
    run_parser.add_argument("--hs")

    run_parser.add_argument("--https", action="store_true")

    run_parser.add_argument("--guess-word", action="store_true")
    run_parser.add_argument("--guess-append", action="store_true")
    run_parser.add_argument("--time-based", action="store_true", help="Use time-based payloads")
    run_parser.add_argument("--time-based-deviation", type=float, default=0.35, help="Deviation threshold for time-based guessing (default: 0.35)")

    run_parser.add_argument("--dr", action="store_true", help="Dry run: only print command")
    run_parser.add_argument("-v", action="store_true", help="Verbose mode: print more details")

    args = parser.parse_args()

    if args.command == "run":
        method, path, headers, body, base_url = parse_burp_request_file(args.request_file)
        if not base_url and not args.base_url:
            raise ValueError("Host header not found in request.")
        else:
            if not args.base_url:
                if args.https:
                    args.base_url = f"https://{base_url}"
                else:
                    args.base_url = f"http://{base_url}"

        if args.time_based:
            # Here I will have to implement my own threading request handler since wfuzz does not support time-based payloads.
            print('Working on time-based payloads...')
            params = build_custom_parameters(method, path, headers, body, args)
            guess_time_based(params, args.time_based_deviation)
            return
            exit(0)

        cmd = build_wfuzz_command(method, path, headers, body, args)

        print(f"\nðŸ”¥ Generated wfuzz command:\n{cmd}\n")
        if args.dr:
            print("Dry run mode: command not executed.")
            return

        if args.guess_word:
            # Support numeric guessing sequences if placeholder FIZZR
            if 'FIZZR' in cmd:
                results = []
                i = 0
                while True:
                    cur_cmd = cmd.replace('FIZZR', str(i))  
                    res = guess_string_burp(cur_cmd, args.guess_append)
                    if not res:
                        print('\nGuessed results:')
                        for idx, r in enumerate(results): print(f"{idx}: {r}")
                        break
                    results.append(res)
                    i += 1
            elif 'FIZZW' in cmd:
                res = guess_string_burp(cmd, args.guess_append)
                print(f"Guessed string: {res}")
            else:
                res = guess_string_burp(cmd, args.guess_append)
                print(f"Guessed string: {res}")
        else:
            subprocess.run(cmd, shell=True, executable='/bin/bash')     
            pass

if __name__ == "__main__":
    main()
