#!/usr/bin/env python3
"""
WFuzz Helper Tool

Converts a Burp-style HTTP request file into a wfuzz command
and optionally performs character-by-character fuzzing.
"""
import argparse
import json
import os
import string
import subprocess
from collections import Counter
from typing import Any, Dict, List, Tuple

# Safe characters for guessing
SAFE_CHARS = set(string.ascii_letters + string.digits + '-_')


def find_most_probable_character(data: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
    """
    Identify deviations from the majority response pattern to find probable characters.
    Returns dict with 'safe_chars' and 'special_chars'.
    """
    pattern_counts = Counter((e['chars'], e['words'], e['lines']) for e in data)
    if not pattern_counts:
        return {'safe_chars': [], 'special_chars': []}
    majority_pattern, _ = pattern_counts.most_common(1)[0]
    deviations = []
    for e in data:
        if e.get('code', 0) < 400:
            patt = (e['chars'], e['words'], e['lines'])
            if patt != majority_pattern:
                dev = sum(abs(a - b) for a, b in zip(patt, majority_pattern))
                deviations.append((dev, e))
    deviations.sort(key=lambda x: x[0], reverse=True)
    result = {'safe_chars': [], 'special_chars': []}
    if deviations:
        max_dev = deviations[0][0]
        for dev, e in deviations:
            if dev != max_dev:
                break
            char = e.get('payload', '')
            details = {'chars': e['chars'], 'words': e['words'], 'lines': e['lines'], 'deviation': dev}
            key = 'safe_chars' if len(char) == 1 and char in SAFE_CHARS else 'special_chars'
            result[key].append({'char': char, 'details': details})
    return result


def to_ansi_c_quoted_string(s: str) -> str:
    """Convert string to ANSI C quoted string for shell."""
    parts, i = [], 0
    while i < len(s):
        c = s[i]
        if c == '\r' and i + 1 < len(s) and s[i+1] == '\n':
            parts.append('\\x0d\\x0a'); i += 2; continue
        if c == '\n':
            parts.append('\\x0d\\x0a'); i += 1; continue
        if 32 <= ord(c) <= 126 and c not in "\\'":
            parts.append(c)
        else:
            if c == '\\': parts.append('\\\\')
            elif c == "'": parts.append("\\'")
            else: parts.append(f"\\x{ord(c):02x}")
        i += 1
    return "$'" + ''.join(parts) + "'"


def parse_burp_request_file(path: str) -> Tuple[str, str, Dict[str, str], str]:
    """Parse Burp HTTP request file into method, path, headers, body."""
    with open(path, 'r') as f:
        lines = f.read().splitlines()
    method, req_path, _ = lines[0].split(maxsplit=2)
    headers, body_lines, in_body = {}, [], False
    for line in lines[1:]:
        if not in_body and not line.strip():
            in_body = True
            continue
        if in_body:
            body_lines.append(line)
        else:
            if ':' in line:
                k, v = line.split(':', 1)
                headers[k.strip()] = v.strip()

    base_url = headers.get('Host', '').strip()

    body = '\r\n'.join(body_lines)
    return method, req_path, headers, body, base_url


def build_wfuzz_command(method: str, path: str, headers: Dict[str, str], body: str, args: argparse.Namespace) -> str:
    """Construct wfuzz command from parsed request and CLI args."""
    # Wordlist
    if args.w:
        wl = f'file,{args.w}'
    elif args.r:
        wl = f'range,1-{args.r}'
    elif args.guess_word:
        tmp = '/tmp/printables.txt'
        with open(tmp, 'w') as f:
            f.write('\n'.join(c for c in string.printable if c.isprintable()))
        wl = f'file,{tmp}'
    else:
        wl = ''

    # Count FUZZ occurrences
    cnt = path.count('FUZZ') + sum(v.count('FUZZ') for v in headers.values()) + (body.count('FUZZ') if body else 0)
    if cnt == 0:
        raise ValueError("No FUZZ placeholder found in request.")
    payloads = ' '.join(['-z ' + wl] * cnt)

    # Base command
    parts = ['wfuzz', payloads, '-X', method]

    # Filters
    for opt, flag in (('hl','--hl'),('hh','--hh'),('sc','--sc'),('hc','--hc')):
        val = getattr(args, opt)
        if val:
            parts += [flag, str(val)]
    if args.ss:
        parts += ['--ss', args.ss]
    if args.hs:
        parts += ['--hs', args.hs]

    # Headers (quoted)
    for k, v in headers.items():
        parts.append('-H')
        parts.append(f'"{k}: {v}"')

    # Body
    if body:
        parts += ['-d', to_ansi_c_quoted_string(body)]

    # JSON output for guess mode
    if args.guess_word:
        parts.append('-o json')

    # URL
    base = args.base_url.rstrip('/')
    parts.append(f'"{base}{path}"')

    return ' '.join(parts)


def guess_string(wfuzz_cmd: str) -> str:
    """Guess a single string by iteratively finding one char at a time."""
    result = ''
    while True:
        cmd = wfuzz_cmd.replace('FUZZ', f'{result}FUZZ')
        if 'FIZZW' in cmd:
            cmd = cmd.replace('FIZZW', f'{len(result)}')

        print(f"\nðŸ”¥ Executing: \n{cmd}\n")
        p = subprocess.Popen(cmd, shell=True, executable='/bin/bash', stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        for line in p.stdout or []:
            if not line.strip():
                continue
            try:
                resp = json.loads(line)
                chars = find_most_probable_character(resp)
                if len(chars['safe_chars']) == 1:
                    ch = chars['safe_chars'][0]['char']
                    result += ch
                    print(f"Found '{ch}' -> {result}")
                else:
                    print("Manual inspect:", chars)
                    return result
            except Exception:
                print(line)
        p.wait()
    return result


def main() -> None:
    parser = argparse.ArgumentParser(description="Convert Burp request to wfuzz command.")
    subparsers = parser.add_subparsers(dest="command", required=True)
    
    run_parser = subparsers.add_parser("run", help="Payload-related operations")
    run_parser.add_argument("request_file")

    run_parser.add_argument("--base_url")
    run_parser.add_argument("-w")
    run_parser.add_argument("-r", type=int)
    run_parser.add_argument("--hl", type=int)
    run_parser.add_argument("--hh", type=int)
    run_parser.add_argument("--sc")
    run_parser.add_argument("--hc")
    run_parser.add_argument("--ss")
    run_parser.add_argument("--hs")
    run_parser.add_argument("--https", action="store_true")

    run_parser.add_argument("--guess-word", action="store_true")
    run_parser.add_argument("--dr", action="store_true", help="Dry run: only print command")
    run_parser.add_argument("-v", action="store_true", help="Dry run: only print command")

    args = parser.parse_args()

    if args.command == "run":
        method, path, headers, body, base_url = parse_burp_request_file(args.request_file)
        if not base_url and not args.base_url:
            raise ValueError("Host header not found in request.")
        else:
            if not args.base_url:
                if args.https:
                    args.base_url = f"https://{base_url}"
                else:
                    args.base_url = f"http://{base_url}"

        cmd = build_wfuzz_command(method, path, headers, body, args)

        print(f"\nðŸ”¥ Generated wfuzz command:\n{cmd}\n")
        if args.dr or args.v:
            print("Dry run mode: command not executed.")
            return

        if args.guess_word:
            # Support numeric guessing sequences if placeholder FIZZR
            if 'FIZZR' in cmd:
                results = []
                i = 0
                while True:
                    cur_cmd = cmd.replace('FIZZR', str(i))
                    res = guess_string(cur_cmd)
                    if not res:
                        print('\nGuessed results:')
                        for idx, r in enumerate(results): print(f"{idx}: {r}")
                        break
                    results.append(res)
                    i += 1
            elif 'FIZZW' in cmd:
                res = guess_string(cmd)
                print(f"Guessed string: {res}")
            else:
                res = guess_string(cmd)
                print(f"Guessed string: {res}")
        else:
            subprocess.run(cmd, shell=True, executable='/bin/bash')     
            pass

if __name__ == "__main__":
    main()
